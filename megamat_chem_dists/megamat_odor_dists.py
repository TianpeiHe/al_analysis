#!/usr/bin/env python3

from pprint import pprint

import numpy as np
import pandas as pd
import xarray as xr
import matplotlib.pyplot as plt
import seaborn as sns

from natmix import plot_corr


megamat_abbrev2inchi = {
    '1-5ol': 'InChI=1S/C5H12O/c1-2-3-4-5-6/h6H,2-5H2,1H3',
    '1-6ol': 'InChI=1S/C6H14O/c1-2-3-4-5-6-7/h7H,2-6H2,1H3',
    '1-8ol': 'InChI=1S/C8H18O/c1-2-3-4-5-6-7-8-9/h9H,2-8H2,1H3',
    '2-but': 'InChI=1S/C4H8O/c1-3-4(2)5/h3H2,1-2H3',
    '2h': 'InChI=1S/C7H14O/c1-3-4-5-6-7(2)8/h3-6H2,1-2H3',
    '6al': 'InChI=1S/C6H12O/c1-2-3-4-5-6-7/h6H,2-5H2,1H3',
    'B-cit': 'InChI=1S/C10H20O/c1-9(2)5-4-6-10(3)7-8-11/h5,10-11H,4,6-8H2,1-3H3',
    'IaA': 'InChI=1S/C7H14O2/c1-6(2)4-5-9-7(3)8/h6H,4-5H2,1-3H3',
    'Lin': 'InChI=1S/C10H18O/c1-5-10(4,11)8-6-7-9(2)3/h5,7,11H,1,6,8H2,2-4H3',
    'aa': 'InChI=1S/C2H4O2/c1-2(3)4/h1H3,(H,3,4)',
    'benz': 'InChI=1S/C7H6O/c8-6-7-4-2-1-3-5-7/h1-6H',
    'eb': 'InChI=1S/C6H12O2/c1-3-5-6(7)8-4-2/h3-5H2,1-2H3',
    'ep': 'InChI=1S/C5H10O2/c1-3-5(6)7-4-2/h3-4H2,1-2H3',
    'ms': 'InChI=1S/C8H8O3/c1-11-8(10)6-4-2-3-5-7(6)9/h2-5,9H,1H3',
    'pa': 'InChI=1S/C7H14O2/c1-3-4-5-6-9-7(2)8/h3-6H2,1-2H3',
    't2h': 'InChI=1S/C6H10O/c1-2-3-4-5-6-7/h4-6H,2-3H2,1H3/b5-4+',
    'va': 'InChI=1S/C5H10O2/c1-2-3-4-5(6)7/h2-4H2,1H3,(H,6,7)',
}
assert len(set(megamat_abbrev2inchi.keys())) == len(set(megamat_abbrev2inchi.values()))
inchi2abbrev = {v: k for k, v in megamat_abbrev2inchi.items()}
megamat_inchi = set(megamat_abbrev2inchi.values())

inchi_order = list(megamat_abbrev2inchi.values())
abbrev_order = list(megamat_abbrev2inchi.keys())

def mordred_dists():
    # TODO how does new-descs_28-06-21.csv differ? it's just the same thing for a new
    # set of odors, right? are any of the new odors relevant? concatenate?
    #
    # This contains mordred / pubchem descriptors for a bunch of odors (should be the
    # odors from our original natural odor literature database). CSVs generated by Matt
    # Bauer, and can be downloaded from the Hong lab Dropbox at:
    # 'HongLab @ Caltech/Natural odors/Chemical descriptor database'
    df = pd.read_csv('chemical-descriptors_8-7-20.csv')

    unique_inchi = set(df.inchi)
    assert all([x in unique_inchi for x in megamat_inchi])

    df = df[df.inchi.isin(megamat_inchi)].reset_index()

    # W/ errors='coerce', non-parseable will convert to NaN
    df.value = pd.to_numeric(df.value, errors='coerce')
    df.dropna(subset=['value'], inplace=True)

    # TODO drop all the pubchem ones first? (i.e. df.descriptor_source ==
    # 'pubchem_computed', only source other than 'mordred')

    df = df.pivot(index='inchi', columns='descriptor', values='value')

    #for descriptor_sources in (())
    fig, ax = plt.subplots()

    # inchi x inchi
    corr = df.T.corr()
    corr = corr.loc[inchi_order, inchi_order].copy()
    corr.index = abbrev_order
    corr.columns = abbrev_order

    #im = ax.matshow(corr, cmap='RdBu_r')
    #im = ax.matshow(corr, cmap='Reds', vmin=0.6, vmax=1)
    #fig.colorbar(im, ax=ax)

    cg = sns.clustermap(corr, cmap='Reds', vmin=0.6, vmax=1)

    ax.set_xticks(list(range(len(abbrev_order))))
    ax.set_yticks(list(range(len(abbrev_order))))

    ax.set_xticklabels(abbrev_order, rotation='vertical')
    ax.set_yticklabels(abbrev_order)

    '''

    col_order = [inchi2abbrev[x] for x in corr.columns]
    assert col_order == abbrev_order

    row_order = [inchi2abbrev[x] for x in corr.index]
    assert row_order == abbrev_order
    '''

    #fig.savefig('corr_all_mordred_and_pubchem_descriptors.svg')
    cg.savefig('corr_all_mordred_and_pubchem_descriptors.svg')


def mendy_info_dists():
    # TODO TODO add notes on where ChemDe_Info_dist.csv came from (Mendy, right?), how
    # it was generated, and which version it is (didn't Betty give me two somehow
    # different ones? only one good?)
    df = pd.read_csv('ChemDe_Info_dist.csv')
    df = df.set_index('inchi')
    df.columns.name = 'inchi'

    inchi_order_noprefix = [x[len('InChI='):] for x in inchi_order]
    print('incihs:')
    pprint(inchi_order)
    print('no prefix:')
    pprint(inchi_order_noprefix)
    print([x in df.index for x in inchi_order_noprefix])
    print([x in df.columns for x in inchi_order_noprefix])

    va_inchi = '1S/C5H10O2/c1-2-3-4-5(6)7/h2-4H2,1H3,(H,6,7)'
    print(any(va_inchi in x for x in df.index))
    print(any(va_inchi in x for x in df.columns))

    va_inchi_2layers = 'C5H10O2/c1-2-3-4-5(6)7'
    print(any(va_inchi_2layers in x for x in df.index))
    print(any(va_inchi_2layers in x for x in df.columns))


def schmuker_dists():
    '''
    orig_df = pd.read_excel(
        'schmuker/df_smart_descriptors_nonans_with_inchis_and_odor_names.xlsx'
    )

    df = orig_df.drop(columns='odor_name').set_index('inchi', verify_integrity=True)
    assert len(df.index) == len(set(df.index))
    '''

    #df1 = pd.read_csv('schmuker/Inchis with odor fragment descriptors-1.csv')
    #df2 = pd.read_csv('schmuker/Inchis with odor fragment descriptors - no nans-1.csv')

    df = pd.read_csv('schmuker/schmuker_no_nans.csv', header=None)
    df.columns = ['inchi'] + list(range(len(df.columns) - 1))
    df = df.set_index('inchi')

    # There are a few similar chemicals to benzaldehyde (e.g. benzoic acid)
    # but no benzaldehyde itself.
    print('Odors with InChI not in Schmuker:')
    pprint([(n, inchi) for n, inchi in megamat_abbrev2inchi.items()
        if inchi not in df.index
    ])

    import ipdb; ipdb.set_trace()


def main():
    #mordred_dists()

    #mendy_info_dists()

    schmuker_dists()

    plt.show()
    import ipdb; ipdb.set_trace()


if __name__ == '__main__':
    main()

